# -*- coding: utf-8 -*-

"""Top-level package for w2v_tissues."""

__author__ = """shfong"""
__email__ = 'shfong@ucsd.edu'
__version__ = '0.1.0'

from datetime import datetime
import os
import json
import logging
import copy
from flask import Flask, request
from flask_restplus import reqparse, Api, Resource, fields, marshal
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address

from w2v_tissues.get_tissue_with_w2v import Tissue


desc = """WordToVectorTissues REST Server

Basic API to get tissues based on word2vec cosine similarities with Pubmed

 **NOTE:** This service is experimental. The interface is subject to change.


""" # noqa


WORDTOVECTOR_REST_SETTINGS_ENV = 'WORDTOVEC_REST_SETTINGS'
# global api object
app = Flask(__name__)

DEFAULT_RATE_LIMIT_KEY = 'DEFAULT_RATE_LIMIT'
WORDTOVECMODEL='WORDTOVEC_MODELPATH'

app.config[DEFAULT_RATE_LIMIT_KEY] = '360 per hour'
app.config[WORDTOVECMODEL] = '/tmp/wikipedia-pubmed-and-PMC-w2v.bin'


app.config.from_envvar(WORDTOVECTOR_REST_SETTINGS_ENV, silent=True)
app.logger.info('Job Path dir: ' + app.config[WORDTOVECMODEL])

SERVICE_NS = 'w2v_tissues'

# key in result dictionary denoting input parameters
DISEASE_PARAM = 'disease'
N_PARAM = 'n'
SEP="sep"

api = Api(app, version=str(__version__),
          title='WordToVectorTissues REST Server',
          description=desc, example='put example here')

# enable rate limiting
limiter = Limiter(
    app,
    key_func=get_remote_address,
    default_limits=[app.config[DEFAULT_RATE_LIMIT_KEY]],
    headers_enabled=True
)

# add rate limiting logger to the regular app logger
for handler in app.logger.handlers:
    limiter.logger.addHandler(handler)

# need to clear out the default namespace
api.namespaces.clear()

ns = api.namespace(SERVICE_NS,
                   description='WordToVectorTissues REST Server Service')

app.config.SWAGGER_UI_DOC_EXPANSION = 'list'


ERROR_RESP = api.model('ErrorResponseSchema', {
    'errorCode': fields.String(description='Error code to help identify issue'),
    'message': fields.String(description='Human readable description of error'),
    'description': fields.String(description='More detailed description of error'),
    'stackTrace': fields.String(description='stack trace of error'),
    'threadId': fields.String(description='Id of thread running process'),
    'timeStamp': fields.String(description='UTC Time stamp in YYYY-MM-DDTHH:MM.S')
})

TOO_MANY_REQUESTS = api.model('TooManyRequestsSchema', {
    'message': fields.String(description='Contains detailed message about exceeding request limits')
})

RATE_LIMIT_HEADERS = {
 'x-ratelimit-limit': 'Request rate limit',
 'x-ratelimit-remaining': 'Number of requests remaining',
 'x-ratelimit-reset': 'Request rate limit reset time'
}


class ErrorResponse(object):
    """Error response
    """
    def __init__(self):
        """
        Constructor
        """
        self.errorCode = ''
        self.message = ''
        self.description = ''
        self.stackTrace = ''
        self.threadId = ''
        self.timeStamp = ''

        dt = datetime.utcnow()
        self.timeStamp = dt.strftime('%Y-%m-%dT%H:%M.%s')

def get_package_dir():
    """
    Gets package dir
    :return:
    """
    return os.path.dirname(__file__)

def get_biggim_tissues():
    """

    :return:
    """
    return os.path.join(get_package_dir(), 'biggim_tissues.txt')

app.logger.info('Loading Tissue data')
TISSUE_ENG = Tissue(loggerLevel=logging.DEBUG,
                    biggim_tissues=get_biggim_tissues(),
                    w2v_model_path=app.config[WORDTOVECMODEL])
TISSUE_ENG.calculate_background(1_000)
app.logger.info('Done loading Tissue data')

@api.doc('Runs query')
@ns.route('/', strict_slashes=False)
class GetTissue(Resource):
    """
    Runs WordToVectorTissues
    """
    POST_HEADERS = copy.deepcopy(RATE_LIMIT_HEADERS)
    POST_HEADERS['Location'] = 'URL containing resource/result generated by this request'

    post_parser = reqparse.RequestParser()

    post_parser.add_argument(DISEASE_PARAM,
                             required=True,
                             help='Disease Parameter',
                             location='form')
    post_parser.add_argument(N_PARAM, type=int,
                             default=10,
                             help='Number of tissues to return',
                             location='form')
    post_parser.add_argument(SEP,
                             default='_',
                             help="Separation character for the input phrase", 
                             location="form")

    @api.doc('Runs WordToVectorTissues')
    @api.response(200, 'The task was successfully submitted to the service. ')
    @api.response(400, 'Bad request, an invalid input was passed in')
    @api.response(429, 'Too many requests', TOO_MANY_REQUESTS, headers=RATE_LIMIT_HEADERS)
    @api.response(500, 'Internal server error', ERROR_RESP, headers=RATE_LIMIT_HEADERS)
    @api.expect(post_parser)
    def post(self):
        """
        Submits request


        """
        app.logger.debug("Post received")

        params = GetTissue.post_parser.parse_args(request, strict=True)
        try:
            out = TISSUE_ENG.get_distance(params['disease'],
                                          n=params['n'],
                                          sep=params['sep'],
                                          compare_with_background=True)

        except KeyError:
            return "Disease not found in corpus!", 400

        except IndexError:
            return "n greater than the number of tissues!", 400

        out = {
            'result': [
                {
                    'tissue': i,
                    'score': '{:6.4f}'.format(j),
                    'percentile': '{:7.4f}'.format(k)
                } for i, j, k in out
            ]
        }

        return out, 200

    @api.doc('Returns {\'hello\': \'world\'}')
    @api.response(200, 'Successful response from server')
    def get(self):
        """
        Returns json {'hello': 'world'}

        :return:
        """
        return {'hello': 'world'}
